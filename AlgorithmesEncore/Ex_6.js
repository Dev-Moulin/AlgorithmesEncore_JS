function countBuildingsWithView(heights) {
    let count = 0;
    let maxRight = 0; // Hauteur maximale rencontr√©e √† droite
  
    for (let i = heights.length - 1; i >= 0; i--) { // Parcours de droite √† gauche
      if (heights[i] > maxRight) {
        count++; // Ce b√¢timent a une vue d√©gag√©e
        maxRight = heights[i]; // Mettre √† jour le max √† droite
      }
    }
  
    return count;
  }
  
  // Test du programme
  console.log(countBuildingsWithView([3, 7, 8, 3, 6, 1])); // 3 (immeubles 8, 6, 1)
  console.log(countBuildingsWithView([1, 4, 5, 8]));       // 1 (immeuble 8)
  console.log(countBuildingsWithView([10, 4, 3, 2]));      // 4 (tous les immeubles)
  console.log(countBuildingsWithView([1, 2, 3, 4, 5]));    // 1 (seulement le dernier)
  

//   Explication d√©taill√©e :
// Variable maxRight :

// Initialis√©e √† 0 (aucun b√¢timent √† droite au d√©part).
// Stocke la hauteur maximale rencontr√©e au fur et √† mesure 
// qu'on parcourt les immeubles de droite √† gauche.

// Parcours de droite √† gauche :

// On commence par le dernier immeuble et on remonte vers le premier.
// Si la hauteur de l'immeuble courant est sup√©rieure √† maxRight :
// Il a une vue d√©gag√©e ‚Üí incr√©menter count.
// Mettre √† jour maxRight.
// Complexit√© ùëÇ(ùëõ):

// Une seule boucle parcourt la liste de droite √† gauche, 
// respectant la contrainte.